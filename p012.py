#!/usr/bin/env python3

# ===============================================================================
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
# ===============================================================================

import math


def TriangleNumbers():
    tn, n = 1, 1
    while True:
        yield tn
        tn, n = tn + n + 1, n + 1


def FindFactors(n):
    factors = 0
    x = math.sqrt(n) + 1
    for i in range(1, int(x)):
        if n % i == 0:
            factors += 2
    if x**2 == n:
        factors -= 1
    return factors


def Find500factors():
    x = TriangleNumbers()
    maxf = 0
    maxn = 0
    while True:
        n = next(x)
        f = FindFactors(n)
        if maxf <= f:
            maxf, maxn = f, n
            print("{0} - {1}.\tMaxf = {2}\tMaxn = {3}".format(n, f, maxf, maxn))
        if f > 500:
            print("{0}!! f = {1}".format(n, f))
            break
    return True


if __name__ == '__main__':
    Find500factors()
